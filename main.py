import telebot
from telebot import types
import database
import random
import re
import configparser
import psycopg2
 
config = configparser.ConfigParser()
config.read('config.ini', encoding = 'utf-8')
 
TOKEN = config['configs']['token']
password = config['configs']['password']
 
 
bot = telebot.TeleBot(TOKEN)
 
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
STATE_MAIN = 0
STATE_ADD_WORD = 1
STATE_DELETE_WORD = 2
user_states = {0: "STATE_MAIN", 1: "STATE_ADD_WORD", 2: "STATE_DELETE_WORD"}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ üÜï'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå')
    )
    return markup
 
 
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
def options_keyboard(options):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for option in options:
        markup.add(types.KeyboardButton(option))
    markup.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'), types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'))
    return markup
 

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç 
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    database.add_user_if_not_exists(user.id, user.first_name)
    user_states[user.id] = STATE_MAIN
    
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=main_keyboard()
    )
 

# –ö–Ω–æ–ø–ª–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
@bot.message_handler(func=lambda m: m.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
def main_menu(message):
    user_states[message.from_user.id] = STATE_MAIN
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )
 

# –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ 
@bot.message_handler(func=lambda m: m.text == '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ üÜï' and user_states.get(m.from_user.id) == STATE_MAIN)
def new_word(message):
    user_id = message.from_user.id
    word_data = database.get_random_user_word(user_id)
    
    if word_data:
        word_id, rus_word, target, opt1, opt2, opt3 = word_data
        
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        options = [target, opt1, opt2, opt3]
        random.shuffle(options)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ callback data
        msg = bot.send_message(
            message.chat.id,
            f"üìñ –°–ª–æ–≤–æ: <b>{rus_word}</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=options_keyboard(options),
            parse_mode='HTML'
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(
            msg, 
            check_answer,
            word_id=word_id,
            correct_answer=target,
            russian_word=rus_word,
            attempt = 1
        )
    else:
        bot.send_message(
            message.chat.id,
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞!",
            reply_markup=main_keyboard()
        )
 
def check_answer(message, word_id, correct_answer, russian_word, attempt=1):
    user_id = message.from_user.id
    
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        main_menu(message)
        return
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©':
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>",
            parse_mode='HTML',
            reply_markup=main_keyboard()
        )
        return
    
    if message.text == correct_answer:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚úÖ'),
            types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üîÑ'),
            types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
        )
        
        bot.send_message(
            message.chat.id,
            f"üéâ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ª–æ–≤–æ–º '{russian_word}'?",
            parse_mode='HTML',
            reply_markup=markup
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        bot.register_next_step_handler(
            message, 
            handle_word_action,
            word_id=word_id,
            russian_word=russian_word
        )
    else:
        if attempt < 2:  # –î–∞–µ–º 2 –ø–æ–ø—ã—Ç–∫–∏
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ —Å–ª–æ–≤–æ–º
            word_data = database.get_word_by_id(word_id)
            if word_data:
                word_id, rus_word, target, opt1, opt2, opt3 = word_data
                options = [target, opt1, opt2, opt3]
                random.shuffle(options)
                
                markup = options_keyboard(options)
                markup.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'))
                
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ 2.\n\n"
                    f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{rus_word}</b>?",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
                bot.register_next_step_handler(
                    message, 
                    check_answer,
                    word_id=word_id,
                    correct_answer=correct_answer,
                    russian_word=russian_word,
                    attempt=attempt+1
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.",
                    reply_markup=main_keyboard()
                )
        else:
            # –ü–æ—Å–ª–µ 2 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>",
                parse_mode='HTML',
                reply_markup=main_keyboard()
            )
 

def handle_word_action(message, word_id, russian_word):
    user_id = message.from_user.id
    
    if message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚úÖ':
        database.remove_user_word(user_id, word_id)
        bot.send_message(
            message.chat.id,
            f"üóë –°–ª–æ–≤–æ '{russian_word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            reply_markup=main_keyboard()
        )
    elif message.text == '–û—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üîÑ':
        bot.send_message(
            message.chat.id,
            f"üîÑ –°–ª–æ–≤–æ '{russian_word}' –æ—Å—Ç–∞–ª–æ—Å—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
            reply_markup=main_keyboard()
        )
    else:
        main_menu(message)
 

@bot.message_handler(func=lambda m: m.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' and user_states.get(m.from_user.id) == STATE_MAIN)
def add_word_start(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_ADD_WORD
    
    msg = bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ : –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ : –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π1 : –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π2 : –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π3</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–Ø–±–ª–æ–∫–æ : Apple : Orange : Banana : Pear</i>",
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    bot.register_next_step_handler(msg, add_word_process)
 
def add_word_process(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_MAIN
    
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        main_menu(message)
        return
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
    parts = [part.strip() for part in message.text.split(':')]
    
    if len(parts) != 5:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–Ø–±–ª–æ–∫–æ : Apple : Orange : Banana : Pear</i>",
            parse_mode='HTML',
            reply_markup=main_keyboard()
        )
        return
    
    russian, target, wrong1, wrong2, wrong3 = parts
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if not all([russian, target, wrong1, wrong2, wrong3]):
        bot.send_message(
            message.chat.id,
            "‚ùå –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!",
            reply_markup=main_keyboard()
        )
        return
    
    if database.add_custom_word(user_id, russian, target, wrong1, wrong2, wrong3):
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°–ª–æ–≤–æ <b>{russian}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            parse_mode='HTML',
            reply_markup=main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –°–ª–æ–≤–æ <b>{russian}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            parse_mode='HTML',
            reply_markup=main_keyboard()
        )

 
@bot.message_handler(func=lambda m: m.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå' and user_states.get(m.from_user.id) == STATE_MAIN)
def delete_word_start(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_DELETE_WORD
    
    bot.send_message(
        message.chat.id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    bot.register_next_step_handler(message, process_word_deletion)
 
def process_word_deletion(message):
    user_id = message.from_user.id
    word_to_delete = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = psycopg2.connect(**database.DB_CONFIG)
    with conn.cursor() as cur:
        cur.execute("""
            SELECT w.id 
            FROM words w
            JOIN user_word uw ON w.id = uw.words_id
            WHERE uw.user_id = %s AND w.russian_word = %s
        """, (user_id, word_to_delete))
        result = cur.fetchone()
    
    if not result:
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard()
        )
        user_states[user_id] = STATE_MAIN
        return
    
    word_id = result[0]
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–î–∞, —É–¥–∞–ª–∏—Ç—å ‚úÖ'),
        types.KeyboardButton('–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å ‚ùé')
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    global deletion_data
    deletion_data[user_id] = {"word_id": word_id, "word": word_to_delete}
    
    bot.send_message(
        message.chat.id,
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word_to_delete}'?",
        reply_markup=markup
    )
    
    bot.register_next_step_handler(message, confirm_deletion)
 
deletion_data = {}


def confirm_deletion(message):
    user_id = message.from_user.id
    data = deletion_data.get(user_id)
    
    if not data:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_keyboard()
        )
        user_states[user_id] = STATE_MAIN
        return
    
    if message.text == '–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å ‚ùé':
        bot.send_message(
            message.chat.id,
            f"–°–ª–æ–≤–æ '{data['word']}' –æ—Å—Ç–∞–ª–æ—Å—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.",
            reply_markup=main_keyboard()
        )
    elif message.text == '–î–∞, —É–¥–∞–ª–∏—Ç—å ‚úÖ':
        if database.remove_user_word(user_id, data["word_id"]):
            bot.send_message(
                message.chat.id,
                f"‚úÖ –°–ª–æ–≤–æ '{data['word']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_keyboard()
            )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if user_id in deletion_data:
        del deletion_data[user_id]
    
    user_states[user_id] = STATE_MAIN
 
 
if __name__ == "__main__":
    database.create_database()
    bot.polling()